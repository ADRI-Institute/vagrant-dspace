#!/bin/bash

# local-bootstrap.sh.example is an example of a local bootstrap shell povisioner for Vagrant-DSpace. If you copy this file to local-bootstrap.sh, and modify it to match your needs, it will be run whenever you run vagrant-up.

# local-bootstrap.sh is a hacky little solution to customizing your own DSpace clone from github. You can use it to do such things as set an upstream remote, configure fetching of pull requests from upstream, and much more

# it is also a handy stop-gap measure for providing needed functionality for Vagrant DSpace (such as AIP auto-loading) without having to do a lot of puppet scripting. This works.


# WORD of WARNING: don't forget this script will run as root, so be careful about files you create. Git config lines will need to be run either as the vagrant user.

# You may have configured a different admin eperson in local.yaml, if so, you should use that admin user for the WHO variable below:
WHO="dspacedemo+admin@gmail.com"
CONTENT="/vagrant/content"
HOME="/home/vagrant"
DSPACE_HOME="$HOME/dspace"
DSPACE="$DSPACE_HOME/dspace"
DSPACESRC="$DSPACE_HOME-src"

## START OFF BY CUSTOMIZING THE GIT CLONE ##
cd $DSPACESRC

# set git to allways rebase when we pull (using sudo to run as the vagrant user, since this script runs as root)
sudo -i -u vagrant git config --global --bool pull.rebase true

# set git to always use pretty colors
sudo -i -u vagrant git config --global color.ui always

# and don't even try to get smart about converting line endings, that just pisses me off
sudo -i -u vagrant git config --global core.autocrlf input

# and I don't need merge backups, really, I don't
sudo -i -u vagrant git config --global --bool merge.keepbackups false

echo "and now setting up my preferences for my working copy... adding an upstream remote, PR refs..." 

# add an upstream remote
git remote add upstream git@github.com:DSpace/DSpace.git

# enable fetching of pull requests from upstream (this may or may not be common practice, but it's handy, why not try it out?)
git config --add remote.upstream.fetch +refs/pull/*/head:refs/remotes/upstream/pr/*

# Git-smart is super helpful, especially for git newbies, and is worth installing just for smart-log
echo "installing git-smart"
sudo /opt/vagrant_ruby/bin/gem install git-smart

# BASH inputrc customization 
if [ -f "/vagrant/config/dotfiles/inputrc" ]; then
    echo "setting up BASH inputrc file"
    sudo -i -u vagrant cp /vagrant/config/dotfiles/inputrc /home/vagrant/.inputrc
fi

# Vim customization

# copy vimrc if it exists
if [ -f "/vagrant/config/dotfiles/vimrc" ]; then
    echo "setting up .vimrc file"
    sudo -i -u vagrant cp /vagrant/config/dotfiles/vimrc /home/vagrant/.vimrc
fi

# copy vim folder and its contents if they exists
if [ -d "/vagrant/config/dotfiles/vim" ]; then
    echo "copying .vim settings folder"
    sudo -i -u vagrant cp -r /vagrant/config/dotfiles/vim /home/vagrant/.vim
    echo "creating .vimbackups folder"
    sudo -i -u vagrant mkdir /home/vagrant/.vimbackups
fi

# MORE dotfiles

# copy GPG keys and trust files if they exist
if [ -d "/vagrant/config/dotfiles/gnupg" ]; then
   echo "copying GPG keys and trust files..."
   sudo -i -u vagrant cp -r /vagrant/config/dotfiles/gnupg /home/vagrant/.gnupg
fi

# copy maven settings.xml if it exists
if [ -f "/vagrant/config/dotfiles/maven_settings.xml" ]; then
   echo "copying Maven settings.xml file..."
   sudo -i -u vagrant cp /vagrant/config/dotfiles/maven_settings.xml /home/vagrant/.m2/settings.xml
fi

# NOTE: if you want more dotfiles installed, you'll need to specifically copy them, following
# the examples above. We do this so that we only install files with intention, and don't
# blindly install a config file. We recommend being cautious and only attempt to copy
# files and directories if they exist (use the -f and -d tests).


## now add content ##

# NOTE: this will only work if the SITE AIP file is named the same as the handle prefix
# configured for this Vagrant-DSpace workspace (check vagrant.properties in dspace-src). By
# default it's the same prefix as the demo.dspace.org server, as DSpace Committers have
# ready access to the AIP files used to populate demo.dspace.org, and we can use
# Vagrant-DSpace to create more such AIPs. Demo's handle prefix is 10673.

SITE=`echo $CONTENT/SITE@* | cut -f1 -d' '`
if [ -n "$SITE" ]; then
   echo "Recursively installing content from AIPs at $CONTENT (starting with $SITE AIP)" 
         
          # let's get the handle from this site AIP
	  SHFN="${SITE##*/}"
	  SH=`echo $SHFN | cut -f2 -d'@'`
	  SH=${SH/-/\/}
          SH=`echo $SH | cut -f1 -d'.'`

          # --------------------------------------
          # Stop Tomcat
          # --------------------------------------
          service tomcat7-vagrant stop
          
          echo "" 

   cd $HOME
   sudo -i -u vagrant $DSPACECMD packager  -u -r -a -f -t AIP -e $WHO -i $SH -o skipIfParentMissing=true -o createMetadataFields=true $SITE
	# ----------------------------------------------
	# Re-index content -- only necessary for DSpace 3.x and earlier
	# ----------------------------------------------

	#echo "Reindexing all content in DSpace..."
	#/home/vagrant/dspace/bin/dspace index-init

	#echo ""

	# --------------------------------------
	# Start up Tomcat
	# --------------------------------------
        service tomcat7-vagrant start

	echo ""

	# --------------------------------------
	# Step 8 : Update Discovery indexes
	# --------------------------------------
	echo "Rebuilding Discovery (Solr) Indexes..."
	# Note: the '-f' option tells Discovery to force a reindex of everything and remove docs which no longer exist
	/home/vagrant/dspace/bin/dspace index-discovery -f

	echo ""
	echo ""
	echo "SUCCESS! batch load of AIP content is now complete!"
fi
